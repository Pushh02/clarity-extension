{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Clarity",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#contract-calls"
    },
    {
      "include": "#tuples"
    },
    {
      "include": "#lists"
    },
    {
      "include": "#principals"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#types"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#errors"
    },
    {
      "include": "#parens"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-semicolon.clarity",
          "match": ";;.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.define.clarity",
          "match": "\\b(define-public|define-private|define-read-only|define-trait|define-fungible-token|define-non-fungible-token|define-constant|define-data-var|define-map)\\b"
        },
        {
          "name": "keyword.control.flow.clarity",
          "match": "\\b(if|when|match|let|begin|and|or|not)\\b"
        },
        {
          "name": "keyword.control.response.clarity",
          "match": "\\b(ok|err|some|none|true|false)\\b"
        },
        {
          "name": "keyword.control.unwrap.clarity",
          "match": "\\b(unwrap!|unwrap-panic|unwrap-err!|unwrap-err-panic|try!|asserts!|expects!|expects-err!|default-to)\\b"
        },
        {
          "name": "keyword.control.type.clarity",
          "match": "\\b(is-eq|is-ok|is-err|is-some|is-none|as-contract|as-max-len?|to-int|to-uint)\\b"
        },
        {
          "name": "keyword.control.blockchain.clarity",
          "match": "\\b(contract-caller|tx-sender|contract-owner|block-height|stx-transfer?|stx-get-balance)\\b"
        },
        {
          "name": "keyword.control.data.clarity",
          "match": "\\b(var-get|var-set|map-get?|map-set|map-insert|map-delete|map-insert!|map-set!|print)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.clarity",
          "match": "\\b[a-zA-Z][a-zA-Z0-9_-]*\\b(?=\\s*\\()"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.clarity",
          "match": "\\+|-|\\*|/|%|mod|pow|=|!=|<|<=|>|>=|\\+|-|\\*|/|mod|pow|concat|str-len|str-to-int|int-to-str|len|append|merge|get"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.clarity",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.clarity",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.unicode.clarity",
          "begin": "u\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.clarity",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.clarity",
          "match": "\\b(u|i)?\\d+\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.clarity",
          "match": "\\b(uint|int|bool|string-ascii|string-utf8|principal|list|tuple|optional|response|buff|buff-ascii|buff-utf8|trait|fungible-token|non-fungible-token)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.clarity",
          "match": "\\b(ok|err|some|none|true|false)\\b"
        }
      ]
    },
    "parens": {
      "patterns": [
        {
          "name": "punctuation.section.parens.begin.clarity",
          "match": "\\("
        },
        {
          "name": "punctuation.section.parens.end.clarity",
          "match": "\\)"
        }
      ]
    },
    "principals": {
      "patterns": [
        {
          "name": "constant.other.principal.clarity",
          "match": "\\bST[0-9A-Z]{38}\\b"
        }
      ]
    },
    "tuples": {
      "patterns": [
        {
          "name": "meta.structure.tuple.clarity",
          "begin": "\\btuple\\s*\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "lists": {
      "patterns": [
        {
          "name": "meta.structure.list.clarity",
          "begin": "\\blist\\s*\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "contract-calls": {
      "patterns": [
        {
          "name": "meta.function-call.contract.clarity",
          "begin": "\\bcontract-call\\?\\s*\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.clarity",
          "match": "\\b[a-zA-Z][a-zA-Z0-9_-]*\\b"
        }
      ]
    },
    "errors": {
      "patterns": [
        {
          "name": "invalid.illegal.clarity",
          "match": "\\b(define-invalid|define-wrong|invalid-keyword)\\b"
        },
        {
          "name": "invalid.illegal.number.clarity",
          "match": "\\b(u|i)?[a-zA-Z]+\\d+\\b"
        },
        {
          "name": "invalid.illegal.string.clarity",
          "match": "\"[^\"\\n]*$"
        }
      ]
    }
  },
  "scopeName": "source.clarity"
}